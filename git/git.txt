git의 절차 :
1. add : commit 할 index에 추가
2. commit : git에 등록 전, 로컬저장소에 추가를 의미
3. push : git에 등록, 원격 저장소에 추가(동기화)를 의미
------------------------------
git의 기본 (CLI (명령어))
$ git add helloworld.py (helloworld.py = argument 1개)
$ git commit -m
$ git config --global user.naver "John" (user.naver / "John" = argument 2개)
------------------------------
cd : 디렉터리 변경 명령어 / cd .. : 상위 폴더 이동 (. : 현재 폴더, .. : 상위 폴더)/ cd "폴더명" : "폴더명"으로 이동
ls : 현재 폴더이 있는 파일 리스트 / ls -al : 자세히 보기
mkdir : 현재 폴더에서 폴더 생성 명령어
touch : 현재 폴더에 파일 생성 명령어
cp "1" "2" : "1"을 "2" 이름으로 복사 / 빈 폴더는 그냥 복사가 되는데 빈 폴더가 아니면 -> cp -r "1" "2" 로 써줘야 함.
mv "1" "2" : "1"을 "2" 이름으로 변경
------------------------------------------------------------------------------------------
git 절차로 진입하기 위해
$ git init
------------------------------
$ git status
를 입력하면 빨간색 파일들은 add가 안 된 파일
$ git add "파일명"
을 입력하면 "파일명"의 파일 add가 진행됨
$ git add .
을 입력하면 현재 폴더의 모드 파일 add가 진행됨
------------------------------
$ git status를 입력하면 모든 파일이 add되어서 commit을 대기하는 의미로 초록색으로 뜸.
------------------------------
$ git commit "커밋 명"
을 입력해주면 config 설정이 없어서 config로 이름, 이메일을 입력해야한다고 함.
$ git config --global user.email "이메일"
$ git config --global user.name "이름"
해준 뒤
$ git commit "커밋 명"
을 입력해주면 "커밋 명"으로 commit이 완료되는 문구가 뜬다.
이후, $ git status로 확인해보면 commit할게 없이 깔끔하다고 뜬다.
$ git log
로 확인해보면 commit한 시기와 그 때의 "commit명"이 뜬다.
------------------------------------------------------------------------------------------
파일 수정 후 (add 전에)
$ git diff "파일명"
을 입력하면 줄 추가, 삭제 정보가 나온다. : add를 하게 되면 이미 commit index에 등록되면서 변경 사항 확인 불가
$ git log --oneline
으로 log를 기록 당 한 줄씩 깔끔하게 볼 수 있다.
$ git log --oneline --graph
으로 log를 그래프로 기록 당 한 줄씩 깔끔하게 본다.
------------------------------------------------------------------------------------------
commit과 branch (git log --oneline --graph했을 때 나옴)
*---------------*------------------*---------------* : -> 이 전체가 branch / * = commit
각 작업자가 특정 commit부터 서로의 작업 과정으로 A branch, B branch 등 곁가지가 생길 수 있기에 의미있는 용어